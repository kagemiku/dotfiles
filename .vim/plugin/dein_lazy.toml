[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
if = '''has('lua')'''
hook_add = '''
    let g:acp_enableAtStartup=0
    let g:neocomplete#enable_at_startup=1
    let g:neocomplete#enable_smart_case=1
    let g:neocomplete#sources#syntax#min_keyword_length=3
    let g:neocomplete#lock_buffer_name_pattern='\*ku\*'

    let g:neocomplete#sources#dictionary#dictionaries={
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns={}
    endif
    let g:neocomplete#keyword_patterns['default']='\h\w*'

    "inoremap <expr><C-g>     neocomplete#undo_completion()
    "inoremap <expr><C-l>     neocomplete#complete_common_string()

    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    endfunction

    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

    " AutoComplPop like behavior.
    "let g:neocomplete#enable_auto_select=1

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns={}
    endif
    let g:neocomplete#sources#omni#input_patterns.php='[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c='[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp='[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.go = '\h\w\.\w*'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl='\h\w*->\h\w*\|\h\w*::'
'''

[[plugins]]
repo = 'Shougo/neocomplcache.vim'
on_i = 1
if =  '''!has('lua')'''
hook_add = '''
    let g:neocomplcache_enable_at_startup=1
    let g:neocomplcache_enable_ignore_case=1
    let g:neocomplcache_enable_smart_case=1
    let g:neocomplcache_min_syntax_length=3
    let g:neocomplcache_lock_buffer_name_pattern='\*ku\*'
    if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns={}
    endif
    let g:neocomplcache_keyword_patterns['default']='\h\w*'
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = ['NERDTree']
hook_add = '''
    let g:NERDTreeShowHidden=1
    let g:NERDTreeIgnore=['\.swp$']
'''

[[plugins]]
repo =  'tomtom/tcomment_vim'
on_i = 1

[[plugins]]
repo =  'justmao945/vim-clang'
on_i = 1
on_ft = ['h', 'hpp', 'c', 'cpp', 'cc']
hook_add = '''
    let g:clang_auto=0
    let g:clang_c_completeopt='menuone'
    let g:clang_cpp_completeopt='menuone'
    let g:clang_c_options='-std=c11'
    let g:clang_cpp_options='-std=c++1z -stdlib=libc++ --pedantic-errors'
'''

[[plugins]]
repo =  'elixir-lang/vim-elixir'
on_ft = ['ex', 'exs', 'eex']

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = ['PrevimOpen']
hook_add = '''
    nnoremap <C-p> :PrevimOpen<CR>
    let g:previm_open_cmd='open -a "Google Chrome"'
    augroup PrevimSettings
        autocmd!
        autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
    augroup END
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = ['Calendar']

[[plugins]]
repo = 'mattn/emmet-vim'
on_i = 1
on_ft = ['html', 'css', 'php']
hook_add = '''
    let g:user_emmet_settings={
    \   'variables' : {
    \       'lang' : 'ja'
    \   }
    \}
'''

[[plugins]]
repo = 'vim-scripts/closetag.vim'
on_i = 1
on_ft = ['html', 'css', 'php']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'css']

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['html', 'js']

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']
hook_add = '''
syn keyword htmlTagName contained article aside audio bb canvas command
syn keyword htmlTagName contained datalist details dialog embed figure
syn keyword htmlTagName contained header hgroup keygen mark meter nav output
syn keyword htmlTagName contained progress time ruby rt rp section time
syn keyword htmlTagName contained source figcaption
syn keyword htmlArg contained autofocus autocomplete placeholder min max
syn keyword htmlArg contained contenteditable contextmenu draggable hidden
syn keyword htmlArg contained itemprop list sandbox subject spellcheck
syn keyword htmlArg contained novalidate seamless pattern formtarget
syn keyword htmlArg contained formaction formenctype formmethod
syn keyword htmlArg contained sizes scoped async reversed sandbox srcdoc
syn keyword htmlArg contained hidden role
syn match   htmlArg "\<\(aria-[\-a-zA-Z0-9_]\+\)=" contained
syn match   htmlArg contained "\s*data-[-a-zA-Z0-9_]\+"
'''

[[plugins]]
repo = 'tell-k/vim-browsereload-mac'
on_ft = ['html']
hook_add = '''
    let g:returnApp = "iTerm"
'''

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffee']

[[plugins]]
repo = 'keith/swift.vim'
on_ft = ['swift']

[[plugins]]
repo = 'vim-scripts/racket.vim'
on_ft = ['rkt', 'rkts']

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_i = 1
hook_add = '''
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif

    let g:neosnippet#snippets_directory='~/.vim/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_build_constraints = 1
    let g:go_fmt_command = "goimports"
'''

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['js']

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kt']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rs']
hook_add = '''
    let g:rustfmt_autosave = 1
'''
